# This is the modified desktop application release workflow focusing on Windows, Linux x64 and macOS builds from feat/db branch.

name: Build-FeatDB-Multi-Platform-Release

on:
  workflow_dispatch:
    inputs:
      build-target:
        description: 'Build Target (Release Type)'
        type: choice
        required: true
        options:
          - beta
          - nightly
          - non-release
        default: "non-release"
      is-draft:
        description: 'Draft Release? (Beta only, Nightly will always be a non-draft)'
        type: boolean
        required: true
        default: true
      is-pre-release:
        description: 'Pre Release? (labeled as "PreRelease")'
        type: boolean
        required: true
        default: true
      enable-file-sync-production:
        description: 'File sync production mode'
        type: boolean
        required: true
        default: true
      enable-plugins:
        description: 'Build with plugin system support'
        type: boolean
        required: true
        default: true
  schedule: # UTC
    - cron: '0 0 * * *'

env:
  CLOJURE_VERSION: '1.11.1.1413'
  NODE_VERSION: '20'
  JAVA_VERSION: '11'
  GIT_BRANCH: 'feat/db'

jobs:
  sync-branch:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_BRANCH }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Sync with upstream
        if: ${{ github.event_name == 'schedule' }}
        run: |
          git remote add upstream https://github.com/logseq/logseq.git
          git fetch upstream
          git merge upstream/${{ env.GIT_BRANCH }} --no-edit
          git push origin ${{ env.GIT_BRANCH }}
          
      - name: Skip sync for manual triggers
        if: ${{ github.event_name != 'schedule' }}
        run: echo "Manual trigger detected - skipping sync with upstream but continuing workflow"

  compile-cljs:
    runs-on: ubuntu-22.04
    needs: [sync-branch]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_BRANCH }}

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn cache directory
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache clojure deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
          key: ${{ runner.os }}-clojure-lib-${{ hashFiles('**/deps.edn') }}

      - name: Setup clojure
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: ${{ env.CLOJURE_VERSION }}

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(node ./scripts/get-pkg-version.js "${{ github.event.inputs.build-target }}")
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Update Nightly APP Version
        if: ${{ github.event.inputs.build-target == 'nightly' || github.event_name == 'schedule' }}
        run: |
          sed -i 's/defonce version ".*"/defonce version "${{ steps.ref.outputs.version }}"/g' src/main/frontend/version.cljs

      - name: Set Build Environment Variables (only when workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        # if scheduled, use default settings
        run: |
          echo "ENABLE_PLUGINS=${{ github.event_name == 'schedule' || github.event.inputs.enable-plugins == 'true' }}" >> $GITHUB_ENV
          echo "ENABLE_FILE_SYNC_PRODUCTION=${{ github.event_name == 'schedule' || github.event.inputs.enable-file-sync-production == 'true' }}" >> $GITHUB_ENV

      - name: Compile CLJS
        run: yarn install && gulp build && yarn cljs:release-electron
        env:
          LOGSEQ_SENTRY_DSN: ${{ secrets.LOGSEQ_SENTRY_DSN }}
          LOGSEQ_POSTHOG_TOKEN: ${{ secrets.LOGSEQ_POSTHOG_TOKEN }}

      - name: Update APP Version
        run: |
          sed -i 's/"version": "0.0.1"/"version": "${{ steps.ref.outputs.version }}"/g' ./package.json
        working-directory: ./static

      - name: Display Package.json
        run: cat ./package.json
        working-directory: ./static

      - name: Save VERSION file
        run: echo "${{ steps.ref.outputs.version }}" > ./VERSION
        working-directory: ./static

      - name: List Files
        run: ls -al
        working-directory: ./static

      - name: Cache Static File
        uses: actions/upload-artifact@v4
        with:
          name: static
          path: static

  # 添加 Linux x64 构建作业
  build-linux-x64:
    runs-on: ubuntu-22.04
    needs: [compile-cljs]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v4
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(cat ./static/VERSION)
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build/Release Electron App
        run: yarn install && yarn electron:make
        working-directory: ./static

      - name: Save artifacts
        run: |
          mkdir -p builds
          # NOTE: save VERSION file to builds directory
          cp static/VERSION ./builds/VERSION
          mv static/out/make/*-*.AppImage ./builds/Logseq-linux-x64-${{ steps.ref.outputs.version }}.AppImage
          mv static/out/make/zip/linux/x64/*-linux-x64-*.zip ./builds/Logseq-linux-x64-${{ steps.ref.outputs.version }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logseq-linux-x64-builds
          path: builds

  # 添加 macOS x64 构建作业
  build-macos-x64:
    needs: [compile-cljs]
    runs-on: macos-13

    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v4
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(cat ./static/VERSION)
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: List Static Files
        run: ls -al ./static

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Cache yarn cache directory
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 注意：这里我们简化了原始工作流中的签名步骤，因为你可能没有这些证书
      # 如果你有签名证书，可以取消注释这部分
      # - name: Signing By Apple Developer ID
      #   uses: apple-actions/import-codesign-certs@v1
      #   with:
      #     p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
      #     p12-password: ${{ secrets.APPLE_CERTIFICATES_P12_PASSWORD }}

      - name: Build/Release Electron App for x64
        run: yarn install && yarn electron:make
        working-directory: ./static
        # 如果你有 Apple 开发者账号，也可以取消注释这部分
        # env:
        #   APPLE_ID: ${{ secrets.APPLE_ID_EMAIL }}
        #   APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        #   APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Save x64 artifacts
        run: |
          mkdir -p builds
          mv static/out/make/Logseq.dmg ./builds/Logseq-darwin-x64-${{ steps.ref.outputs.version }}.dmg
          mv static/out/make/zip/darwin/x64/*.zip ./builds/Logseq-darwin-x64-${{ steps.ref.outputs.version }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logseq-darwin-x64-builds
          path: builds

  # 添加 macOS arm64 构建作业
  build-macos-arm64:
    needs: [compile-cljs]
    runs-on: macos-14  # 使用 M1/M2 运行器

    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v4
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: |
          pkgver=$(cat ./static/VERSION)
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Cache yarn cache directory
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-arm64-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-arm64-yarn-

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 同样，我们简化了原始工作流中的签名步骤
      # - name: Signing By Apple Developer ID
      #   uses: apple-actions/import-codesign-certs@v1
      #   with:
      #     p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
      #     p12-password: ${{ secrets.APPLE_CERTIFICATES_P12_PASSWORD }}

      - name: Fetch deps and fix dugit arch for arm64
        run: yarn install --ignore-platform && cd node_modules/dugite && npm_config_arch=arm64 node script/download-git.js
        working-directory: ./static

      - name: Build/Release Electron App for arm64
        run: yarn electron:make-macos-arm64
        working-directory: ./static
        # env:
        #   APPLE_ID: ${{ secrets.APPLE_ID_EMAIL }}
        #   APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        #   APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Save arm64 artifacts
        run: |
          mkdir -p builds
          mv static/out/make/Logseq.dmg ./builds/Logseq-darwin-arm64-${{ steps.ref.outputs.version }}.dmg
          mv static/out/make/zip/darwin/arm64/*.zip ./builds/Logseq-darwin-arm64-${{ steps.ref.outputs.version }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logseq-darwin-arm64-builds
          path: builds

  build-windows:
    runs-on: windows-latest
    needs: [compile-cljs]
    steps:
      - name: Download The Static Asset
        uses: actions/download-artifact@v4
        with:
          name: static
          path: static

      - name: Retrieve tag version
        id: ref
        run: echo "version=$(cat ./static/VERSION)" >> $env:GITHUB_OUTPUT

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Deps Electron app
        run: yarn install
        working-directory: ./static

      - name: Fix Deps Electron app
        run: yarn run postinstall
        working-directory: ./static/node_modules/dugite/

      - name: Build/Release Electron app
        run: yarn electron:make
        working-directory: ./static

      - name: Save Artifact for Code Signing
        run: |
          mkdir builds
          mv static\out\make\squirrel.windows\x64\*.exe    builds\Logseq-win-x64-${{ steps.ref.outputs.version }}.exe

      - name: Upload Artifact for Code Signing
        uses: actions/upload-artifact@v4
        with:
          name: logseq-win64-unsigned-builds
          path: builds

      - name: Save Artifact
        run: |
          rm builds\*.exe
          mv static\out\make\squirrel.windows\x64\*.nupkg  builds\Logseq-win-x64-${{ steps.ref.outputs.version }}-full.nupkg
          mv static\out\make\zip\win32\x64\*.zip           builds\Logseq-win-x64-${{ steps.ref.outputs.version }}.zip
          mv static\out\make\wix\x64\Logseq.msi            builds\Logseq-win-x64-${{ steps.ref.outputs.version }}.msi
          mv static\out\make\squirrel.windows\x64\RELEASES builds\RELEASES

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logseq-win64-builds
          path: builds

  codesign-windows:
    needs: [build-windows]
    runs-on: ubuntu-22.04
    steps:
      - name: Skip Code Signing
        run: echo "Skipping code signing process"
        
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: logseq-win64-unsigned-builds
          path: ./builds
          
      - name: Upload Artifact As-Is
        uses: actions/upload-artifact@v4
        with:
          name: logseq-win64-signed-builds
          path: ./builds

  release-multi-platform:
    needs: [codesign-windows, build-linux-x64, build-macos-x64, build-macos-arm64]
    runs-on: ubuntu-22.04
    steps:
      - name: Download The Windows Artifact (Signed)
        uses: actions/download-artifact@v4
        with:
          name: logseq-win64-signed-builds
          path: ./

      - name: Download The Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: logseq-win64-builds
          path: ./

      - name: Download MacOS x64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: logseq-darwin-x64-builds
          path: ./

      - name: Download MacOS arm64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: logseq-darwin-arm64-builds
          path: ./

      - name: Download The Linux x64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: logseq-linux-x64-builds
          path: ./

      - name: Generate SHA256 checksums
        run: |
          sha256sum *-darwin-* > SHA256SUMS.txt
          sha256sum *-win-* >> SHA256SUMS.txt
          sha256sum *-linux-* >> SHA256SUMS.txt
          sha256sum RELEASES >> SHA256SUMS.txt
          cat SHA256SUMS.txt

      - name: List files
        run: ls -la

      - name: Retrieve tag version
        id: ref
        run: |
          # Extract version from the .exe filename
          pkgver=$(ls Logseq-win-x64-*.exe | sed -E 's/Logseq-win-x64-(.*)\.exe/\1/')
          echo "version=$pkgver" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.ref.outputs.version }}
          name: FeatDB Multi-Platform ${{ steps.ref.outputs.version }}
          body: |
            Multi-Platform build (Windows, Linux x64, macOS) for feat/db branch version ${{ steps.ref.outputs.version }}
            
            This is an automated build from the feat/db branch.
          draft: ${{ github.event.inputs.is-draft == 'true' }}
          prerelease: ${{ github.event.inputs.is-pre-release == 'true' || github.event_name == 'schedule' }}
          files: |
            ./SHA256SUMS.txt
            ./*.zip
            ./*.dmg
            ./*.exe
            ./*.msi
            ./*.nupkg
            ./*.AppImage
            ./RELEASES
